# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name:  Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Debug Secrets 
        run: |
          echo "Checking secrets..."
          if [ -z "${{secrets.SONAR_TOKEN}}" ]; then echo "SONAR_TOKEN is empty"; else echo "SONAR_TOKEN is set"; fi
          if [ -z "${{secrets.SONAR_PROJECT_KEY}}" ]; then echo "SONAR_PROJECT_KEY is empty"; else echo "SONAR_PROJECT_KEY is set"; fi
          if [ -z "${{secrets.SONAR_ORGANIZATION}}" ]; then echo "SONAR_ORGANIZATION is empty"; else echo "SONAR_ORGANIZATION is set"; fi
          if [ -z "${{secrets.DOCKER_USERNAME}}" ]; then echo "DOCKER_USERNAME is empty"; else echo "DOCKER_USERNAME is set"; fi
          if [ -z "${{secrets.DOCKER_PASSWORD}}" ]; then echo "DOCKER_PASSWORD is empty"; else echo "DOCKER_PASSWORD is set"; fi

      - name:  Run SonarCloud Analysis
        run: |
          mvn clean verify sonar:sonar \
            -DskipTests=true \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        
